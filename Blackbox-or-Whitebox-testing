----------Blackbox TestMember-----------
//testing the email format
@test
public void testBlackboxEmail() {
		Member sm = spy(new Member()); 
		int i = 1;
		doReturn("bob").when(sm).getName(); 
		doReturn("123.email.com").when(sm).getEmail();
		assertEquals("(1) bob: 123.email.com",sm.formatMember(i)); 
}

----------Blackbox TestEvent----------

// false date
@test
public void testBlackboxEvent() {
  		
	Event se = spy(new Event());
	doReturn(LocalDate.parse("2020-02-31")).when(se).getEndDate();
	doReturn("projname").when(se).getProjectname();
	doReturn("evname").when(se).getName();
	doReturn("membernames").when(se).getMemberNames();
	assertEquals("2020-10-31 projname: evname- membernames",se.formatEvents());

}

// incorrect date format
@test
public void testBlackboxEvent2() {   		
	   		
	Event se = spy(new Event());
	doReturn(LocalDate.parse("2020/02/31")).when(se).getEndDate();
	doReturn("projname").when(se).getProjectname();
	doReturn("evname").when(se).getName();
	doReturn("membernames").when(se).getMemberNames();
	assertEquals("2020-10-31 projname: evname- membernames",se.formatEvents());

}

----------Blackbox TestMain----------
//testing if the start date is beyond the end date
@test
public void testBlackboxStartAndEndDates() {
		spyPL.add(new Project("Pname2", "Pdesc2"));	
		//add event
		spyPL.get(1).Events.add(new Event("Ename3", "2020-12-05", "2020-12-01","Edesc3",spyPL.get(1).getName()));
		
		spySL = x.orderEvents(spyPL);
		
		actual =  spySL.get(0).getStartDate();
		expected = LocalDate.parse("2020-12-05");
		assertEquals(actual, expected);
		
		actual =  spySL.get(1).getEndDate();
		expected = LocalDate.parse("2020-12-01");
		assertEquals(actual, expected);
}
